services:
  pg:
    image: postgres
    container_name: pg
    restart: always
    environment:
      POSTGRES_NAME: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - djangonetwork

    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 5s
      timeout: 2s
      retries: 3

  user_app:
    build:
      dockerfile: ./docker-build/user-app/Dockerfile
      context: .
    environment:
      BLOG_APP__DB__HOST: pg
      BLOG_APP__DB__PORT: 5432
      BLOG_APP__DB__USER: postgres
      BLOG_APP__DB__PASSWORD: postgres
      BLOG_APP__DB__DATABASE: postgres


  wall_app:
    build:
      dockerfile: ./docker-build/wall-app/Dockerfile
      context: .
    environment:
      BLOG_APP__DB__HOST: pg
      BLOG_APP__DB__PORT: 5432
      BLOG_APP__DB__USER: postgres
      BLOG_APP__DB__PASSWORD: postgres
      BLOG_APP__DB__DATABASE: postgres


  chat_app:
    build:
      dockerfile: ./docker-build/chat-app/Dockerfile
      context: .
    environment:
      BLOG_APP__DB__HOST: pg
      BLOG_APP__DB__PORT: 5432
      BLOG_APP__DB__USER: postgres
      BLOG_APP__DB__PASSWORD: postgres
      BLOG_APP__DB__DATABASE: postgres




    command:
      - "gunicorn"
      - "main:app"
      - "--workers"
      - "1"
      - "--worker-class"
      - "uvicorn.workers.UvicornWorker"
      - "--bind"
      - "0.0.0.0:8000"
    ports:
      - "8000:8000"
    depends_on:
      pg:
        condition: service_healthy




networks:
  djangonetwork:
    driver: bridge

volumes:
  pgdata: